import aiohttp
import requests
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter, Command
from aiogram.types import Message

from keyboards import builders, inline, reply

message_router = Router()
key = '436545b7f7083fe5d098294c296ff748'


@message_router.message(F.text.lower() == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
async def weather(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")
    await state.set_state("–≥–æ—Ä–æ–¥")

    await state.update_data(command=message.text)


@message_router.message(F.text.lower() == "—Å—Å—ã–ª–∫–∏")
async def echo(message: Message):
    await message.answer("C–ø–µ—Ü. –∫–Ω–æ–ø–∫–∏:", reply_markup=inline.dop)


@message_router.message(F.text.lower() == "—Å—Å—ã–ª–∫–∏")
async def echo(message: Message):
    await message.answer("–≤–∞—à–∏ —Å–ø–µ—Ü. –∫–Ω–æ–ø–∫–∏", reply_markup=reply.spec)


@message_router.message(F.text.lower() == "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def echo(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ", reply_markup=builders.calc())


@message_router.message(StateFilter("–≥–æ—Ä–æ–¥"))
async def get_weather(message: Message, state: FSMContext):
    city = message.text.strip().lower()
    resultat = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={key}&units=metric').json()
    if resultat["cod"] != 200:
        return await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    weather_msg = (f'<b>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b>  {resultat["main"]["temp"]} ¬∞C'
                   f'\n<b>ü§í –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:</b> {resultat["main"]["feels_like"]} ¬∞C'
                   f'\n<b>üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:</b>  {resultat["wind"]["speed"]} –º/—Å'
                   f'\n<b>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:</b>  {resultat["main"]["humidity"]}%')

    await message.answer(weather_msg, parse_mode='HTML')

    state_data = await state.get_data()
    asd = state_data.get("command")

    await state.clear()


# Api 1C
@message_router.message(Command("start"))
async def data(message: Message):
    await message.answer(
        text=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ',
        reply_markup=reply.data
    )


@message_router.message(F.text == "üí∂ –°—á–µ—Ç–∞")
async def account(message: Message):
    await message.answer("–ß–µ —Ö–æ—á–µ—à—å", reply_markup=reply.account)


@message_router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def account(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè¶", reply_markup=reply.data)


@message_router.message(F.text == "üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
async def transactions(message):
    await message.answer("–ß–µ –Ω–∞–¥–æ", reply_markup=reply.transactions)


@message_router.message(F.text == "üí≥ –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
async def transactions(message):
    await message.answer("–ö–∞–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–∏—Å—É—é—Ç?", reply_markup=reply.income)


@message_router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
async def transactions_income_expenses(message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", reply_markup=reply.income_expenses)
