import requests
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import Message

from keyboards import builders, inline, reply

message_router = Router()
key = '436545b7f7083fe5d098294c296ff748'

@message_router.message(F.text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
async def weather(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")
    await state.set_state("–≥–æ—Ä–æ–¥")

    await state.update_data(command=message.text)


@message_router.message(F.text)
async def echo(message: Message):
    msg = message.text.lower()
    if msg == "—Å—Å—ã–ª–∫–∏":
       await message.answer("–í–æ—Ç –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏:", reply_markup=inline.dop)
    elif msg == "—Å–ø–µ—Ü. –∫–Ω–æ–ø–∫–∏":
        await message.answer("–í–∞—à–∏ —Å–ø–µ—Ü. –∫–Ω–æ–ø–∫–∏", reply_markup=reply.spec)
    elif msg == "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ", reply_markup=builders.calc())


@message_router.message(StateFilter("–≥–æ—Ä–æ–¥"))
async def get_weather(message: Message, state: FSMContext):
    print(1)
    city = message.text.strip().lower()
    resultat = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={key}&units=metric').json()
    if resultat["cod"] != 200:
        return await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    weather_msg = (f'<b>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b>  {resultat["main"]["temp"]} ¬∞C'
                   f'\n<b>ü§í –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:</b> {resultat["main"]["feels_like"]} ¬∞C'
                   f'\n<b>üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:</b>  {resultat["wind"]["speed"]} –º/—Å'
                   f'\n<b>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:</b>  {resultat["main"]["humidity"]}%')

    await message.answer( weather_msg, parse_mode='HTML')

    state_data = await state.get_data()
    asd = state_data.get("command")

    await state.clear()
