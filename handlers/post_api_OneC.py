import aiohttp
import json
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import Message
from keyboards import reply

post_api_router = Router()


# –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç
@post_api_router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç")
async def post_account(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞")
    await state.set_state("–Ω–∞–∑–≤–∞–Ω–∏–µ")


@post_api_router.message(StateFilter("–Ω–∞–∑–≤–∞–Ω–∏–µ"))
async def state_account(message: Message, state: FSMContext):
    account = str(message.text)
    await state.update_data({"account": account})
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—á–µ—Ç–∞")
    await state.set_state("—Å—É–º–º–∞_—Å—á–µ—Ç–∞")


@post_api_router.message(StateFilter("—Å—É–º–º–∞_—Å—á–µ—Ç–∞"))
async def state_sum(message: Message, state: FSMContext):
    amount = int(message.text)
    data = await state.get_data()
    account = data.get("account")

    # print(amount, account)
    url = "https://fg.shopfigaro.com/shamil/hs/account/oneAccount"
    data = {
        "nameAccount": account,
        "sum": amount
    }
    connector = aiohttp.TCPConnector(ssl=False)

    async with aiohttp.ClientSession(
            auth=aiohttp.BasicAuth("Shamil", "123"),
            connector=connector
    ) as session:
        async with session.post(url=url, json=data) as resp:
            if resp.status != 200:
                return message.answer(f'–°—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω\n–•–∑ –ø–æ—á–µ–º—É')

    await message.answer("–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", reply_markup=reply.data)
    # print(data)
    await state.clear()


# –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–æ—Ö–æ–¥–æ–≤
@post_api_router.message(F.text == "üìà –î–æ—Ö–æ–¥—ã")
async def post_transaction_income(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Å—á–µ—Ç–∞")
    await state.set_state("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")


@post_api_router.message(StateFilter("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"))
async def state_account(message: Message, state: FSMContext):
    account = str(message.text)
    await state.update_data({"account": account})
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    await state.set_state("—Ç–∏–ø")


@post_api_router.message(StateFilter("—Ç–∏–ø"))
async def state_type(message: Message, state: FSMContext):
    typee = str(message.text)
    await state.update_data({"type": typee})
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É")
    await state.set_state("—Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")


@post_api_router.message(StateFilter("—Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"))
async def state_sum(message: Message, state: FSMContext):
    sum = int(message.text)
    await state.update_data({"sum": sum})
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    await state.set_state("–æ–ø–∏—Å–∞–Ω–∏–µ")


@post_api_router.message(StateFilter("–æ–ø–∏—Å–∞–Ω–∏–µ"))
async def state__description_expenses(message: Message, state: FSMContext):
    description = str(message.text)
    data = await state.get_data()
    account = data.get("account")
    typee = data.get("typee")
    sum = data.get("sum")

    url = "https://fg.shopfigaro.com/shamil/hs/postTransactions/transactionIncome"
    data = {
        "nameAccount": account,
        "type": typee,
        "sum": sum,
        "description": description
    }
    # print(data)
    connector = aiohttp.TCPConnector(ssl=False)

    async with aiohttp.ClientSession(
            auth=aiohttp.BasicAuth("Shamil", "123"),
            connector=connector
    ) as session:
        async with session.post(url=url, json=data) as resp:
            if resp.status != 200:
                return message.answer(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞\n–•–∑ –ø–æ—á–µ–º—É')

    await message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", reply_markup=reply.data)
    # print(data)
    await state.clear()


# –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤
@post_api_router.message(F.text == "üìâ –†–∞—Å—Ö–æ–¥—ã")
async def post_transaction_expenses(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Å—á–µ—Ç–∞")
    await state.set_state("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")


@post_api_router.message(StateFilter("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"))
async def state_account_expenses(message: Message, state: FSMContext):
    account = str(message.text)
    await state.update_data({"account": account})
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    await state.set_state("—Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–æ–≤")


@post_api_router.message(StateFilter("—Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–æ–≤"))
async def state_type_expenses(message: Message, state: FSMContext):
    typee = str(message.text)
    await state.update_data({"type": typee})
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É")
    await state.set_state("—Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")


@post_api_router.message(StateFilter("—Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"))
async def state_sum_expenses(message: Message, state: FSMContext):
    sum = int(message.text)
    await state.update_data({"sum": sum})
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    await state.set_state("–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤")


@post_api_router.message(StateFilter("–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤"))
async def state_description_expenses(message: Message, state: FSMContext):
    description = str(message.text)
    data = await state.get_data()
    account = data.get("account")
    typee = data.get("typee")
    sum = data.get("sum")

    url = "https://fg.shopfigaro.com/shamil/hs/postTransactions/transactionExpenses"
    data = {
        "nameAccount": account,
        "type": typee,
        "sum": sum,
        "description": description
    }
    # print(data)
    connector = aiohttp.TCPConnector(ssl=False)

    async with aiohttp.ClientSession(
            auth=aiohttp.BasicAuth("Shamil", "123"),
            connector=connector
    ) as session:
        async with session.post(url=url, json=data) as resp:
            if resp.status == 406:
                return message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç –Ω–∞ —Å—á–µ—Ç—É')
            elif resp.status == 200:
                await message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", reply_markup=reply.data)
    # print(data)
    await state.clear()
