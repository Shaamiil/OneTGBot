import aiohttp

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import Message
from handlers.commands import find_name_by_id
from handlers.get_api_OneC import get_type, get_type_expenses
from keyboards import reply

type_router = Router()


# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –¥–æ—Ö–æ–¥–æ–≤
@type_router.message(F.text == "üßæ –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã –¥–æ—Ö–æ–¥–æ–≤")
async def get_type_income(message):
    types = ""
    types_income = await get_type(message)
    for i in types_income:
        types += f'{i["nameType"]}\n'
    await message.answer(types)

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
@type_router.message(F.text == "üßæ –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤")
async def gett_type_expenses(message):
    types = ""
    types_expenses = await get_type_expenses(message)
    for i in types_expenses:
        types += f'{i["nameType"]}'
    await message.answer(types)


# –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø –¥–æ—Ö–æ–¥–æ–≤
@type_router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø –¥–æ—Ö–æ–¥–æ–≤")
async def create_types(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞")
    await state.set_state("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Ö–æ–¥–∞")


@type_router.message(StateFilter("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Ö–æ–¥–∞"))
async def create_type_income(message: Message, state: FSMContext):
    type_income_code = {}
    type_income_data = await get_type(message)
    type_income = message.text
    for item in type_income_data:
        if item["nameType"] == type_income:
            return await message.answer("–¢–∞–∫–æ–π —Ç–∏–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    user_id = message.from_user.id
    name = find_name_by_id(user_id)
    url = "https://fg.shopfigaro.com/shamil/hs/type/incomePOST"
    data = {
        "nameType": type_income,
        "userName": name,
    }
    connector = aiohttp.TCPConnector(ssl=False)

    async with aiohttp.ClientSession(
            auth=aiohttp.BasicAuth("Shamil", "123"),
            connector=connector
    ) as session:
        async with session.post(url=url, json=data) as resp:
            if resp.status != 200:
                return message.answer(f'–¢–∏–ø –Ω–µ —Å–æ–∑–¥–∞–Ω\n–•–∑ –ø–æ—á–µ–º—É')

    await message.answer("–¢–∏–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", reply_markup=reply.data)
    await state.clear()


# –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–æ–≤
@type_router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–æ–≤")
async def create_types(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞")
    await state.set_state("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞—Å—Ö–æ–¥–∞")


@type_router.message(StateFilter("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞—Å—Ö–æ–¥–∞"))
async def create_type_expenses(message: Message, state: FSMContext):
    type_expenses_code = {}
    type_expenses_data = await get_type_expenses(message)
    type_expenses = message.text
    for item in type_expenses_data:
        if item["nameType"] == type_expenses:
            return await message.answer("–¢–∞–∫–æ–π —Ç–∏–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    user_id = message.from_user.id
    name = find_name_by_id(user_id)
    url = "https://fg.shopfigaro.com/shamil/hs/type/expensesPOST"
    data = {
        "nameType": type_expenses,
        "userName": name,
    }
    connector = aiohttp.TCPConnector(ssl=False)

    async with aiohttp.ClientSession(
            auth=aiohttp.BasicAuth("Shamil", "123"),
            connector=connector
    ) as session:
        async with session.post(url=url, json=data) as resp:
            if resp.status != 200:
                return message.answer(f'–¢–∏–ø –Ω–µ —Å–æ–∑–¥–∞–Ω\n–•–∑ –ø–æ—á–µ–º—É')

    await message.answer("–¢–∏–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", reply_markup=reply.data)
    await state.clear()